

배열)
   String str[]=new String[5];
   String str[]={"길동","길라임","미키주원"};
    ------> 세개의 문자열 데이터에 대해 공통적인 이름 str을 사용.
    ------> 각각을 구분하기 위해 (각각의 데이터를 접근하기 위해)
            str[0], str[1], str[2]번지를 변수명처럼 사용!!
    ------> 전체 데이터를 참조하기 위해 for문 사용
            for(int i=0; i<str.length; i++){
                String s = str[i];
                
                //각문자열의 길이 구하기
                System.out.println(s.length());
                또는 
                System.out.println(str[i].length());
            } 
    
벡터)
   Vector<String> v = new Vector<>(5);
        v.add("길동");
        v.add("길라임");
        v.add("미키주원");
    ------> 세개의 문자열 데이터에 대해 공통적인 이름 v를 사용.
    ------> 각각을 구분하기 위해 (각각의 데이터를 접근하기 위해)
            v.get(0), v.get(1), v.get(2) 를 변수명처럼 사용!!
    ------> 전체 데이터를 참조하기 위해 for문 사용
            for(int i=0; i<v.size(); i++){
                String s = v.get(i);
                
                //각문자열의 길이 구하기
                System.out.println(s.length());
                또는 
                System.out.println(v.get(i).length());
            }     



  Person클래스!! <자바빈즈>

  구성요소)
    private String name;//null ----> "홍길동"
    private int[] age;

    //name에 값을 설정!!    
    public void setName(String name){  // p.name="홍길동";
          this.name = name;            // p.setName("홍길동");
    }

    //name값을 얻어오기
    public String getName(){
        return name;
    }
    
======================================================================
public class Person{
   private int no;//유일한 키값, 변하지 않는 키값
   private String name;
   private int age;
   private String job;
   
   public Person(){}
   public Person(int no, String name, int age, String job){
      this.no = no;
      this.name = name;
      this.age = age;
      this.job = job;
   }
   
   //값설정메소드(외부에서 전달된 데이터를 멤버에 초기화)
   //set으로 시작하는 메소드 - setter메소드 : 파라미터를 정의!!
   public void setNo(int no){
      this.no = no;
   }
   public void setName(String name){
      this.name = name;
   }
   
   //값얻기메소드(외부로 데이터를 전달)
   //get으로 시작하는 메소드 - getter메소드 : 리턴형을 정의!!
   public int getNo(){
      return no;
   }
   public String getName(){
      return name;
   }
}//Person

자바빈즈가 저장되는 벡터)

   Vector<Person> v = new Vector<>(5); //데이터 저장소
      Person p = new Person();  // no=0      <------ 1
                                   name=null <------ "길동"
                                   age=0     <------ 13
                                   job=null  <------ "학생"
             p.no=1; (X)
             p.setNo(1);                      
             p.setName("길동");                         
             p.setAge(13);
             p.setJob("학생");
      v.add(p); 
      
      //첫번째 Person의 이름을 출력하시오. 
       System.out.println( v.get(0).getName() ); 
       //Person이 벡터에 저장되면 p라는 레퍼런스변수 대신 v.get(0)을 사용!!
             
       
      Person p2 = new Person(2,"라임",15,"학생");       
       
      v.add(p2); ------> 벡터에 담기는 순간p2라는 이름대신 v.get(1)을 사용!!
      
      
      //전체 이름 출력!! ★
      for(int i=0; i<v.size(); i++){
         Person pp = v.get(i);
         System.out.println(pp.getName());
         
         또는
         System.out.println(v.get(i).getName());
         
      }
       
======================================================================
기능추가) ====> 유효성검사(Valid Check) : 사용자가 입력한 데이터가 
                            프로그램에서 원하는 데이터인지 체크!!                            
                            
   예) int age=0~100; 범위   ====> 101는 유효하지 않은 데이터!! 
                            
1. 입력폼의 데이터(이름,나이,직업)에 대한 빈값 체크
   -----> String str="";
                 str="  ";   ----> str.trim(); ---> (앞뒤 연속된)공백제거
                 str="     abc      ";

2. 수정폼의 데이터에 대한 빈값 체크
   public boolean isEmpty(){}  Controller에 추가
      -----> 하나라도 빈값이 있으면 리턴 true
                       
3. 나이필드에 입력된 값이 숫자인지 체크 
    matches()메소드 
    
4. 메인뷰에서 수정버튼 클릭시 선택된 행이 있는지 체크
    ----> 만약 선택된 행이 없다면 showMessageDialog()사용
    ----> 행을 선택!! 메시지 출력
    
5. 메인뷰에서 삭제버튼 클릭후 대화상자(inputDialog)에 입력된 값에 대한 체크
    ----> 입력한 데이터가 숫자인지 체크

6. 삭제 delete 실행 전에 confirm대화상자 보이기

7. 삭제 inputDialog에 입력된 번호가 존재하는 번호인지 체크
   ----> 존재하지 않는 번호입니다!!
   
8. 이름TF에서 엔터치면 나이TF이동
   나이TF에서 엔터치면 직업TF이동
   직업TF에서 엔터치면 submit버튼실행.   
   
========================================================================
다음 수업내용:  스레드(Thread) ,Java I/O , Socket


